generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  firstname String
  lastname  String
  email     String    @unique
  password  String
  role      String
  createdAt DateTime  @default(now())
  defaultAt DateTime  @default(now())
  profile   Profile[]
}

model Profile {
  id              Int        @id @default(autoincrement())
  nombres         String
  apellidos       String
  cedula          String
  celular         String
  condicion       String
  fechaNacimiento String
  genero          String
  pais            String
  ciudad          String
  direccion       String
  userId          Int
  createdAt       DateTime   @default(now())
  defaultAt       DateTime   @default(now())
  user            User       @relation(fields: [userId], references: [id])
  registro        Registro[]
}

model Programacion {
  id            Int        @id @default(autoincrement())
  vigenciaDesde DateTime
  vigenciaHasta DateTime
  horaDesde     String
  horaHasta     String
  fechatope     String
  detalle       String
  estado        String
  cupo          Int
  actividadId   Int
  createdAt     DateTime   @default(now())
  defaultAt     DateTime   @default(now())
  actividad     Actividad  @relation(fields: [actividadId], references: [id])
  registro      Registro[]
}

model Actividad {
  id           Int            @id @default(autoincrement())
  descripcion  String
  precio       Int
  estado       String
  createdAt    DateTime       @default(now())
  defaultAt    DateTime       @default(now())
  programacion Programacion[]
}

model Pagoplux {
  id               Int      @id @default(autoincrement())
  idtransaccion    String
  description      String
  token            String
  amount           Float
  cardType         String
  cardIssuer       String
  cardInfo         String
  clientID         String
  clientName       String
  state            String
  fecha            String
  acquirer         String
  deferred         Int
  interests        String
  interestValue    Float
  amountWoTaxes    String
  amountWTaxes     String
  taxesValue       String
  amountAuthorized Int
  discountRate     Float?
  extras           String?
  tipoPago         String
  createdAt        DateTime @default(now())
  defaultAt        DateTime @default(now())
}

model Promocion {
  id          Int      @id @default(autoincrement())
  descripcion String?
  codigo      String
  porcentaje  String
  fechainicio String
  fechafin    String
  estado      String
  createdAt   DateTime @default(now())
  defaultAt   DateTime @default(now())
}

model Facturacion {
  id        Int      @id @default(autoincrement())
  referencia String
  ruc       String
  nombres   String
  direccion String
  correo    String
  monto     String
  registroId String?
  createdAt DateTime @default(now())
  defaultAt DateTime @default(now())
}

model Registro {
  id             Int          @id @default(autoincrement())
  fecharegistro  String
  pagado         Boolean      @default(false)
  promocionId    Int?
  preciopromocion Decimal?
  pagopluxId     Int?
  programacionId Int
  profileId      Int
  createdAt      DateTime     @default(now())
  defaultAt      DateTime     @default(now())
  profile        Profile      @relation(fields: [profileId], references: [id])
  programacion   Programacion @relation(fields: [programacionId], references: [id])
}
